// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Product {
    id          String   @id @default(cuid())
    slug        String   @unique
    title       String
    description String?
    priceCents  Int      @map("price_cents")
    currency    String   @default("USD")
    categoryId  String?  @map("category_id")
    imageUrl    String?  @map("image_url")
    inStock     Boolean  @default(true) @map("in_stock")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // Relations
    category   Category?   @relation(fields: [categoryId], references: [id])
    cartItems  CartItem[]
    orderItems OrderItem[]

    @@index([slug])
    @@index([categoryId])
    @@map("products")
}

model Category {
    id          String   @id @default(cuid())
    slug        String   @unique
    name        String
    description String?
    parentId    String?  @map("parent_id")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // Relations
    parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children Category[] @relation("CategoryHierarchy")
    products Product[]

    @@index([slug])
    @@index([parentId])
    @@map("categories")
}

model Customer {
    id          String   @id @default(cuid())
    clerkUserId String   @unique @map("clerk_user_id")
    email       String   @unique
    firstName   String?  @map("first_name")
    lastName    String?  @map("last_name")
    roles       String[] @default(["customer"])
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // Relations
    orders    Order[]
    cart      Cart?
    addresses Address[]

    @@index([clerkUserId])
    @@index([email])
    @@map("customers")
}

model Address {
    id         String  @id @default(cuid())
    customerId String  @map("customer_id")
    type       String  @default("shipping") // shipping, billing
    firstName  String  @map("first_name")
    lastName   String  @map("last_name")
    line1      String
    line2      String?
    city       String
    state      String
    zipCode    String  @map("zip_code")
    country    String  @default("US")
    isDefault  Boolean @default(false) @map("is_default")

    // Relations
    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

    @@index([customerId])
    @@map("addresses")
}

model Cart {
    id         String   @id @default(cuid())
    customerId String   @unique @map("customer_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    // Relations
    customer Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
    items    CartItem[]

    @@map("carts")
}

model CartItem {
    id        String @id @default(cuid())
    cartId    String @map("cart_id")
    productId String @map("product_id")
    quantity  Int    @default(1)

    // Relations
    cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([cartId, productId])
    @@index([cartId])
    @@index([productId])
    @@map("cart_items")
}

model Order {
    id         String      @id @default(cuid())
    customerId String      @map("customer_id")
    status     OrderStatus @default(PENDING)
    totalCents Int         @map("total_cents")
    currency   String      @default("USD")
    paymentId  String?     @unique @map("payment_id")
    createdAt  DateTime    @default(now()) @map("created_at")
    updatedAt  DateTime    @updatedAt @map("updated_at")

    // Relations
    customer Customer    @relation(fields: [customerId], references: [id])
    items    OrderItem[]
    payment  Payment?    @relation(fields: [paymentId], references: [id])

    @@index([customerId])
    @@index([status])
    @@map("orders")
}

model OrderItem {
    id         String @id @default(cuid())
    orderId    String @map("order_id")
    productId  String @map("product_id")
    quantity   Int
    priceCents Int    @map("price_cents")

    // Relations
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    @@index([orderId])
    @@index([productId])
    @@map("order_items")
}

model Payment {
    id                String        @id @default(cuid())
    stripePaymentId   String        @unique @map("stripe_payment_id")
    status            PaymentStatus @default(PENDING)
    amountCents       Int           @map("amount_cents")
    currency          String        @default("USD")
    paymentMethodType String?       @map("payment_method_type") // card, bank_transfer, etc.
    createdAt         DateTime      @default(now()) @map("created_at")
    updatedAt         DateTime      @updatedAt @map("updated_at")

    // Relations
    order Order?

    @@index([stripePaymentId])
    @@index([status])
    @@map("payments")
}

enum OrderStatus {
    PENDING
    CONFIRMED
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

enum PaymentStatus {
    PENDING
    PROCESSING
    SUCCEEDED
    FAILED
    CANCELLED
    REFUNDED
}
